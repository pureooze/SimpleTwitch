@using SimpleTwitch.Services
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using TwitchEverywhere.Core.Types
@using TwitchEverywhere.Core.Types.Messages.Implementation
@using TwitchEverywhere.Core.Types.Messages.Interfaces
@using Microsoft.Extensions.Configuration

@inject IConfiguration Configuration
@inject ITwitchService twitchService
@inject EventService eventService

@page "/"

<div>
    <h1>Channel: @m_valueFromInputBox</h1>
    <div class="stream-page-content">
        <div class="video">
        </div>

        <div class="chat">
            <div class="chat-wrapper">
                @foreach (IPrivMsg message in m_messages) {
                    <div class="chat-message">
                        <span class="username">
                            @foreach (Badge badge in message.Badges) {
                                @if( m_globalBadges != null && m_globalBadges.TryGetValue( @badge.Name, out GameInfo badgeInfo ) ) {
                                    <img class="twitch-badge" src="@badgeInfo.Versions[0].ImageUrl1x"/>
                                }
                            }
                            <span style="color: @message.Color">@message.DisplayName:</span>
                        </span>
                        <span class="message">
                            @message.Text
                        </span>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
	private Queue<PrivMsg> m_messages = new();
	private Dictionary<string, GameInfo> m_globalBadges;
	private JsonSerializerOptions m_options;
	private int m_batchSize = 100;
	private string m_valueFromInputBox = "hi";
	private ITwitchService m_service;

    public Home() {
        m_globalBadges = new();

        m_options = new JsonSerializerOptions {
            PropertyNamingPolicy = JsonNamingPolicy.SnakeCaseLower,
            PropertyNameCaseInsensitive = true,
        };
    }

    protected async override Task OnInitializedAsync() {
        m_batchSize = Configuration.GetValue<int>( "Settings:BufferSize" );
		m_service = twitchService;

        eventService.OnEnterPressed += HandleEnterPressed;

        var assembly = GetType().Assembly;
        var resourceName = "SimpleTwitch.Resources.Json.global-badges.json";
        using Stream stream = assembly.GetManifestResourceStream( resourceName );
        using StreamReader reader = new StreamReader( stream );
        string json = await reader.ReadToEndAsync();
        m_globalBadges = JsonSerializer.Deserialize<Dictionary<string, GameInfo>>( json, m_options );

		await m_service.ConnectToIrcChannel("itmejp", MessageCallback);
    }

    private void MessageCallback(
        IMessage message
    ) {
        switch( message.MessageType ) {
            case MessageType.PrivMsg:
                if( m_messages.Count > m_batchSize ) {
                    m_messages.Dequeue();
                }

                m_messages.Enqueue( (PrivMsg)message );
                StateHasChanged();
                break;
        }

    }

    private void HandleEnterPressed(
        string value
    ) {
		m_valueFromInputBox = value;
		m_messages.Clear();
		m_service.DisconnectFromIrcChannel();
		m_service.ConnectToIrcChannel(value, MessageCallback);

        StateHasChanged();
    }

    public void Dispose() {
        eventService.OnEnterPressed -= HandleEnterPressed;
    }

    public class Version {
        [JsonPropertyName( "id" )] public string Id { get; set; }

        [JsonPropertyName( "image_url_1x" )] public string ImageUrl1x { get; set; }

        [JsonPropertyName( "image_url_2x" )] public string ImageUrl2x { get; set; }

        [JsonPropertyName( "image_url_4x" )] public string ImageUrl4x { get; set; }

        [JsonPropertyName( "title" )] public string Title { get; set; }

        [JsonPropertyName( "description" )] public string Description { get; set; }

        [JsonPropertyName( "click_action" )] public string ClickAction { get; set; }

        [JsonPropertyName( "click_url" )] public string ClickUrl { get; set; }
    }

    public class GameInfo {
        [JsonPropertyName( "versions" )] public List<Version> Versions { get; set; }
    }

}