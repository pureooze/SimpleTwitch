@inject IConfiguration Configuration
@inject ITwitchService twitchService
@inject EventService eventService

@page "/"
@using Microsoft.Extensions.Configuration
@using SimpleTwitch.Components.Layout
@using TwitchEverywhere.Core.Types.Messages.Implementation
@using TwitchEverywhere.Core.Types.Messages.Interfaces
@using System.Text.Json
@using System.Text.Json.Serialization
@using SimpleTwitch.Services
@using TwitchEverywhere.Core.Types

<div>
    <h1>Channel: @m_valueFromInputBox</h1>
    <div class="stream-page-content">
        <div class="video">
        </div>

		<div class="chat-container">
			<div class="chat">
				<div class="chat-wrapper">
					@foreach (IPrivMsg message in m_messages.Reverse()) {
						<ChatMessage Message="@message"></ChatMessage>
					}
				</div>
			</div>
			<div class="chat-input-container">
				<textarea class="chat-input" type="text" placeholder="Send a message" />
				<button class="chat-send-button">Send</button>
			</div>
		</div>
		
    </div>
</div>

@code {
    private readonly Queue<IPrivMsg> m_messages = new();
    private Dictionary<string, GameInfo> m_globalBadges;
    private readonly JsonSerializerOptions m_options;
    private int m_batchSize = 100;
    private string m_valueFromInputBox = "hi";
    private ITwitchService m_service;
    private readonly bool userScrolledUp = false;

    public Home() {
        m_globalBadges = new Dictionary<string, GameInfo>();

        m_options = new JsonSerializerOptions {
            PropertyNamingPolicy = JsonNamingPolicy.SnakeCaseLower,
            PropertyNameCaseInsensitive = true
        };
    }

    protected override async Task OnInitializedAsync() {
        m_batchSize = Configuration.GetValue<int>( "Settings:BufferSize" );
        m_service = twitchService;

        eventService.OnEnterPressed += HandleEnterPressed;

        var assembly = GetType().Assembly;
        var resourceName = "SimpleTwitch.Resources.Json.global-badges.json";
        using var stream = assembly.GetManifestResourceStream( resourceName );
        using var reader = new StreamReader( stream );
        var json = await reader.ReadToEndAsync();
        m_globalBadges = JsonSerializer.Deserialize<Dictionary<string, GameInfo>>( json, m_options );

        await m_service.ConnectToIrcChannel( channel: "cohh", MessageCallback );
    }

    private void MessageCallback(
        IMessage message
    ) {
        switch( message.MessageType ) {
            case MessageType.PrivMsg:
                if( m_messages.Count > m_batchSize ) {
                    m_messages.Dequeue();
                }

                m_messages.Enqueue( (PrivMsg)message );
                StateHasChanged();
                break;
        }

    }

    private void HandleEnterPressed(
        string value
    ) {
        m_valueFromInputBox = value;
        m_messages.Clear();
        m_service.DisconnectFromIrcChannel();
        m_service.ConnectToIrcChannel( value, MessageCallback );

        StateHasChanged();
    }

    public class Version {
        [JsonPropertyName( "id" )] public string Id { get; set; }

        [JsonPropertyName( "image_url_1x" )] public string ImageUrl1x { get; set; }

        [JsonPropertyName( "image_url_2x" )] public string ImageUrl2x { get; set; }

        [JsonPropertyName( "image_url_4x" )] public string ImageUrl4x { get; set; }

        [JsonPropertyName( "title" )] public string Title { get; set; }

        [JsonPropertyName( "description" )] public string Description { get; set; }

        [JsonPropertyName( "click_action" )] public string ClickAction { get; set; }

        [JsonPropertyName( "click_url" )] public string ClickUrl { get; set; }
    }

    public class GameInfo {
        [JsonPropertyName( "versions" )] public List<Version> Versions { get; set; }
    }

}