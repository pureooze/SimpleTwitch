@using TwitchEverywhere.Core.Types.Messages.Interfaces
@using System.Text.Json
@using System.Text.Json.Serialization
@using TwitchEverywhere.Core.Types
@using System.Reflection
@using SimpleTwitch.Data

<div class="chat-message">
	<span class="username">
		@foreach (Badge badge in Message.Badges) {
			@if (m_globalBadges != null && m_globalBadges.TryGetValue(badge.Name, value: out GameInfo? badgeInfo)) {
				<img title="@badgeInfo.Versions[0].Description" alt="@badgeInfo.Versions[0].Description" class="twitch-badge" src="@badgeInfo.Versions[0].ImageUrl1x" />
			}
		}
        <a @onclick="() => HandleUsernameClick(Message)" style="color: @Message.Color">@Message.DisplayName:</a>
	</span>
	<span class="message">
		@Message.Text
	</span>
</div>

@code {

	[Parameter]
	public IPrivMsg Message { get; set; }
    
    [Parameter]
    public EventCallback<IPrivMsg> OnChildActionWithData { get; set; }
    
	private Dictionary<string, GameInfo> m_globalBadges = new();
    
    private JsonSerializerOptions m_options = new() {
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
        WriteIndented = true
    };
    
	protected override async Task OnInitializedAsync() {
		Assembly assembly = GetType().Assembly;
		const string resourceName = "SimpleTwitch.Resources.Json.global-badges.json";
        await using Stream? stream = assembly.GetManifestResourceStream(resourceName);
		using StreamReader reader = new(stream);
		string json = await reader.ReadToEndAsync();
		m_globalBadges = JsonSerializer.Deserialize<Dictionary<string, GameInfo>>(json, m_options);

	}
    
    private async Task HandleUsernameClick(IPrivMsg message) {
        Console.WriteLine("Username clicked ");
        if( OnChildActionWithData.HasDelegate ) {
            await OnChildActionWithData.InvokeAsync( message );
        }
    }
}
